GHex 4 pre-alpha information
============================

GHex 4 is currently in pre-alpha state.  As it has been substantially reworked
from GHex 3.x and, as of the time of writing, has only been recently merged to
the `master` branch (December 2021), it will require some substantial testing
and translation updates.

Visibly to the end user, some new features include:

 - More modern and up-to-date look and feel, consistent with the GNOME HIG.
 - Tabbed interface.
 - Dark Mode (by default, the GTK system default is used, but can be
   overridden with a checkbox and a switch in the Preferences dialog).
 - Custom clipboard data, for less error-prone copying and pasting of binary
   data; this will fall back to plaintext when unavailable.
 - Copy and Paste Special dialogs, which allow you to, for instance, copy and
   paste hex pairs from GHex into other applications, and from other
   applications into GHex.

I'll break up the known issues into two categories:  items I would consider to
be blockers for a stable release, and other known issues, which will be
earmarked for priority after the first stable release of GHex 4.

Blockers for stable release:

 - The layout manager does not currently work perfectly. With group types
   other than 'byte' in particular, the allocation of space is poor. With the
   default 'byte' group type, it works better, but it does not use the full
   amount of its allocated size as efficiently as possible.

 - Fixes for lots of UI imperfections, including widgets not grabbing focus
   when they should; also there are some obvious missing keybindings.

 - The offsets column shows some spurious lines when a file is first loaded.
   This can be cleared by clicking anywhere on the hex widget to clear it.

 - The hex-document portion of the gtkhex library is a relic of code written
   in the 90s, and it shows. Some more sophisticated caching and memory
   management is in order as opposed to simply calling g_malloc on basically
   the entirety of the file being opened. This can cause unstable and
   unpredictable behaviour when very large files are loaded.

Other known issues to be addressed in a future version:

 - The HexDocument API is fine as a GObject API, and has been reworked into a
   final type, to allow for the underlying implementation to be changed in the
   future. But, at the backend it is still stuck in the 90s with its malloc'ing
   of the file as a whole into a giant buffer instead of using more sophisticated
   memory mapping. This makes GHex choke on very large files and causes other
   unpredictable behaviour. There are many excellent backends baked into glib2,
   and HexDocument should be migrated to a more sophisticated and reliable
   backend mechanism.

(Logan Rathbone <poprocks@gmail.com>)
